# Magicbox

## 概要
URLを入力するだけで簡単にデプロイを行える機能を持つ開発支援サービスを開発する
詳細は開発ルール下要件定義を参照

## 開発環境の構築方法
1. 作業ディレクトリにてGit cloneを行う
2. ビルドを行う
```
> docker-compose build
```
3. 開発環境のup
```
> docker-compose up -d
```
IDEなどの開発環境は各自に任せるものとする。

## 開発ルール
開発を行う際は下記のブランチルールに従う

また、常に最新のdevelopブランチの状態になるようmerge処理を行う
### ブランチ
- main: 現在デプロイされているプロダクト
- develop: 開発中バージョンの中心
- feature: 新機能開発を行う際のブランチ(developから派生させる)
- hotfix: 緊急のバグ修正を行う際のブランチ(developから派生させる)

開発を行う際は`develop`ブランチから`feature/hotfix`ブランチを作成して開発するものとする。

また、ブランチを作成する場合は下記の命名規則に従うものとする。

`feature/[GitHub名]/[開発概要][IssueID]`

`hotfix/[GitHub名]/[開発概要][IssueID]`

例: `feature/Kento210/create_new_page#0`

### タスク管理について
作業する内容についてIssue + Projectにて項目を作って作業を行う。

作成する際は下記命名規則に従う
- プレフィックスにfeature/hotfixのいずれか正しいものをつける

### PRについて
各開発が終了した際はdevelopブランチへPRを出すものとする。

また、PRを出した場合は各個人が自己レビューを行う。

PR申請者以外がレビューを行い問題ないと判断された場合はMerge処理を行う

### デブロイについて
Mainブランチが外部に公開する最新プロダクトとして更新された際にデブロイ作業を行うものとする.

# 要件定義

### 概要

Magicboxは、

- ユーザーがフロント側にGithub URLを提供する
- バックエンド側でレポジトリをクローン、ビルド
- VPSにデプロイ
- docker-composeで立ち上げ
- Nginxでドメインをマッピング

の順で機能することで、制作物の自動デプロイをサポートするサービスです。

### 主要な機能

- **GitHubリポジトリのクローン**: ユーザーが指定したGitHub URLからソースコードをクローンする。
- **ビルドプロセス**: クローンしたリポジトリのコードをビルドし、実行可能なアプリケーションを生成する。
- **VPSへのアップロード**: ビルドしたアプリケーションを指定されたVPSにアップロードする。
- **Dockerコンテナの起動**: Docker-composeを使用して、アプリケーションをホストするコンテナを立ち上げる。
- **ドメインマッピング**: Nginxを使用してドメインをアプリケーションにマッピングし、アクセス可能にする。

### 技術スタック

- **フロントエンド**: Next.js
- **バックエンド**: Rails
- **コンテナ化**: Docker, Docker-compose
- **リバースプロキシ**: Nginx
- **ホスティング**: VPS

### 非機能要件

- **拡張性**: 将来的に新しい機能やサービスを追加できるように、モジュール式で拡張可能なアーキテクチャを採用する。
- **エラーハンドリング**: エラーが発生した場合には、明確なエラーメッセージとトラブルシューティングの指示を提供する。

### UI

シンプルで使いやすいUIを提供し、ユーザーがGitHub URLを簡単に入力し、デプロイプロセスを開始できるようにする。

### テストとメンテナンス

単体テスト、統合テスト、およびエンドツーエンドテストを実行し、システムの信頼性と安定性を確保する。

# 詳細設計

### フロントエンド

- Next.jsで設計、テキストボックスでURLの入力を受け取れるようにする。
- 可能であれば、ユーザーがGitHub URLを正しく入力できるように、フォームのバリデーションロジックを実装する。
- バックエンド通信のためのAPIクライアントを実装する。（下のAPIリファレンスを参照）
- 簡単な単体テスト（Chromeのデベロッパーモードを使うなど）をする。

### バックエンド

APIリファレンス

| エンドポイント | 機能 | メソッド | リクエストパラメータ | 型 | 必須 | レスポンスパラメータ | 型 |
| --- | --- | --- | --- | --- | --- | --- | --- |
| /deploy | レポジトリのURL | POST | github_url | string | ⚪︎ | status | string |
|  |  |  |  |  |  | message | string |
|  |  |  |  |  |  | deploy_id | number |
| /deploy/status/:deploy_id | スターテスの取得 | GET | deploy_id | string | ⚪︎ | status | string |
|  |  |  |  |  |  | message | string |
|  |  |  |  |  |  | progress | number |

エラーハンドリングについて

- /deployでは最低限 `400 Bad Request` と `500 Internal Server Error` は実装してください。
- /deploy/statusでは最低限 `404 Not Found` と `500 Internal Server Error` は実装してください。

認証について

- 可能であればdeploy_id + JWTを使用してバックエンド側に認証を追加してください。

デプロイ機能の実装について

- Github APIを使用してレポジトリをクローンしてくる機能を実装する。
- ビルド + テスト、デプロイを行うスクリプトを実装する。（要検討）
- VPSへアクセスする機構を用意する。
- Nginxの設定を行う。

テストについて

- 簡単な単体テスト（Postmanを使ったチェック、デプロイの整合性など）をする。